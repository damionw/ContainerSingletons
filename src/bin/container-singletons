#!/usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"
library_import_file="$(readlink -f "${local_path}/../lib/singletons")"

#===================================================================================
#                          Import buildtools library
#===================================================================================
if ! . "$(bashlib --lib)"
then
    logging::fatal "bashlib module requirement not satistified"
fi

. "${library_import_file}"

#===================================================================================
#                              Set defaults
#===================================================================================
logging::set_severity info

#===================================================================================
#                                Execute a subcommand if required
#===================================================================================
if [ -z "$1" ]
then
    :
elif (echo "$1" | grep -q '^[\-]')
then
    :
else
    subcommand="$(singletons::command_folder)/${1}"
    shift

    if [ -x "${subcommand}" ]
    then
        exec "${subcommand}" "$@"
    else
        logging::fatal "No such command '${subcommand}'"
    fi
fi

#===================================================================================
#                              Logging Options
#===================================================================================
logging::set_severity info

#===================================================================================
#                              Help Message
#===================================================================================
showhelp() {
    local _synopsis="
        Manage Docker Singleton Containers
    "

    local -A _keywords=(
        [lib]="Provide the library module import file"
        [version]="Produce the library's version string"
        [commands]="Produce the list of subcommands"
        [instance:]="Select the singleton container instance name"
        [network]="Get container host addresses"
        [repo::]="Select a configuration repo"
        [new]="Build a singleton container instance from scratch"
        [restart]="Restart the selected singleton container instance"
        [start]="Start the selected singleton container instance"
        [stop]="Stop the selected singleton container instance"
        [status]="Retrieve singleton container status"
        [attach]="Attach the selected singleton container instance"
        [exec]="Run shell command(s) against the selected singleton container instance"
        [names]="Display available singleton instance names"
        [list]="Display available singleton instance names"
        [version]="Display software version"
        [help]="Display instructions"
    )

    local _terms="$(echo "${@}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}')"
    local _topic

    local _contents="$(
        echo "${_terms}" | awk -F: '{printf("%s[--%s%s]", sep, $1, (NF == 2 ? sprintf("=<%s>", $1) : "")); sep=" "}'
        echo -en "${_synopsis:+\n}"
        echo "${_synopsis}" | sed -e 's/^[ ]*//g' -e '/^[ ]*$/d'

        echo "${_terms}" | {
            _prefix="\n"

            while read _topic
            do
                if [ -n "${_keywords["${_topic}"]}" ]
                then
                    _fill="$(for ((i=$(echo -n "${_topic}" | wc -c); i < 15; ++i)); do echo -n " "; done)"
                    echo -e "${_prefix}--${_topic}${_fill}${_keywords["${_topic}"]}" | sed -e 's/^./    &/g'
                    _prefix=""
                fi
            done
        }
    )"

    (echo "Usage: $0 ${_contents}"; echo) >&2
}

#===================================================================================
# NOTE: There is a bug in getopts where not specifying at least one short option
#       will cause the first non option parameter to be discarded. Here, we just
#       use -h (help)
#===================================================================================
long_options="help,version,debug,info,warning,error,fatal,repo::,instance:,start,stop,restart,attach,lib,commands,names,list,new,delete,status,network,exec:"

OPTION_TEMP=$(getopt -a -o hv --long ${long_options} -- "$@")

if [ $? != 0 ]
then
    logging::fatal "Invalid command line options ${OPTION_TEMP}"
fi

eval set -- "$OPTION_TEMP"

#===================================================================================
#                       Process command line parameters
#
# NOTE: The command line parameters are available for scripts which
#       source this file.
#===================================================================================
instance_name=
recreate=false

while true
do
    case "$1" in
        --debug|--info|--warning|--error|--fatal)
            logging::set_severity "$(echo "${1}" | sed -e 's/^[\-]*//g')"
            shift
            ;;

        --version)
            singletons::version
            exit 0
            shift
            ;;

        --lib)
            echo "${library_import_file}"
            shift
            exit 0
            ;;

        --network)
            while read instance
            do
                if [ -z "${instance}" ]
                then
                    continue
                fi

                if address="$(singletons::instance::get_container_address "${instance}")"
                then
                    echo "${instance} ${address}"
                fi
            done <<< "${instance_name:-$(singletons::instance::names)}"

            exit 0
            ;;

        --commands)
            find "$(singletons::command_folder)/" -mindepth 1 -maxdepth 1 -type f -executable -printf "%f\n" | sort
            shift
            exit 0
            ;;

        --repo)
            if [ -z "${2}" ]
            then
                singletons::repo
                exit $?
            fi

            singletons::repo "${2}"
            shift 2
            ;;

        --instance)
            logging::warning "Selecting instance '${2}'"
            instance_name="${2}"
            shift 2
            ;;

        --status)
            singletons::instance::status "${instance_name}"
            result=$?
            shift;
            exit $result
            ;;

        --delete)
            singletons::instance::delete "${instance_name}" # Deletion will stop
            shift;
            exit 0
            ;;

        --restart)
            if "${recreate}"
            then
                singletons::instance::delete "${instance_name}"
            else
                singletons::instance::stop "${instance_name}"
            fi

            singletons::instance::start "${instance_name}"
            shift
            ;;

        --new)
            recreate=true
            shift
            ;;

        --stop)
            singletons::instance::stop "${instance_name}"
            shift
            ;;

        --start)
            if "${recreate}"
            then
                singletons::instance::delete "${instance_name}"
            fi

            singletons::instance::start "${instance_name}"
            shift
            ;;

        --attach)
            singletons::instance::attach "${instance_name}"
            exit $?
            ;;

        --exec)
            if ! singletons::instance::exec "${instance_name}" "${2}"
            then
                exit $?
            fi
            ;;

        --names|--list)
            echo "$(singletons::instance::names)"
            exit $?
            ;;

        --)
            shift
            break
            ;;

        *)
            showhelp "${long_options}" >&2
            exit 0
            ;;
    esac
done
