#!/usr/bin/env bash

#===================================================================================
#                          Import tools library
#===================================================================================
first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

. "${local_path}/../../singletons" # . "$(container-singletons --lib)"

#===================================================================================
#                              Logging Options
#===================================================================================
logging::set_severity info

#===================================================================================
#                              Help Message
#===================================================================================
showhelp() {
    local _synopsis="
        Maintain container definitions herd
    "

    local -A _keywords=(
        [debug]="Expose debug level logging"
        [info]="Expose normal level logging"
        [warning]="Expose error level logging"
        [error]="Expose error level logging"
        [fatal]="Expose fatal error level logging"
        [overwrite]="Allow overwriting existing repo"
        [repo::]="Select local path for the container definitions repo"
        [list]="Display the definitions in the repo"
        [create:]="(re)Create repo from URL"
        [version]="Produce the version string"
        [help]="Display instructions"
    )

    local _terms="$(echo "${@}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}')"
    local _topic

    local _contents="$(
        echo "${_terms}" | awk -F: '{printf("%s[--%s%s]", sep, $1, (NF == 2 ? sprintf("=<%s>", $1) : "")); sep=" "}'
        echo -en "${_synopsis:+\n}"
        echo "${_synopsis}" | sed -e 's/^[ ]*//g' -e '/^[ ]*$/d'

        echo "${_terms}" | {
            _prefix="\n"

            while read _topic
            do
                if [ -n "${_keywords["${_topic}"]}" ]
                then
                    _fill="$(for ((i=$(echo -n "${_topic}" | wc -c); i < 15; ++i)); do echo -n " "; done)"
                    echo -e "${_prefix}--${_topic}${_fill}${_keywords["${_topic}"]}" | sed -e 's/^./    &/g'
                    _prefix=""
                fi
            done
        }
    )"

    echo -e "Usage: $0 ${_contents}\n" >&2
}

#===================================================================================
#
#===================================================================================
is_git() {
    echo "$1" | egrep -q '(git[\@\:\.]|github)'
}

#===================================================================================
# NOTE: There is a bug in getopts where not specifying at least one short option
#       will cause the first non option parameter to be discarded. Here, we just
#       use -h (help)
#===================================================================================
long_options="help,version,debug,info,warning,error,fatal,list,repo::,create:,overwrite"

OPTION_TEMP=$(getopt -a -o hv --long ${long_options} -- "$@")

if [ $? != 0 ]
then
    logging::fatal "Invalid command line options ${OPTION_TEMP}"
fi

eval set -- "$OPTION_TEMP"

#===================================================================================
#                       Process command line parameters
#
# NOTE: The command line parameters are available for scripts which
#       source this file.
#===================================================================================
repo_path="$(singletons::default_repo)"
overwrite=false

while true
do
    case "$1" in
        --debug|--info|--warning|--error|--fatal)
            logging::set_severity "$(echo "${1}" | sed -e 's/^[\-]*//g')"
            shift
            ;;

        --repo)
            if [ -z "${2}" ]
            then
                echo "${repo_path}"
                exit 0
            fi

            repo_path="${2}"
            shift 2
            ;;

        --overwrite)
            overwrite=true
            shift
            ;;

        --create)
            if [ -z "${2}" ]
            then
                logging::error "No URL provided"
                exit 212
            elif [ -z "${repo_path}" ]
            then
                logging::error "No repo path has been specified"
                exit 211
            elif [ ! -d "${repo_path}" ]
            then
                :
            elif "${overwrite}"
            then
                rm -rf "${repo_path}"
            fi

            if is_git "${2}"
            then
                if ! git clone --recurse-submodules "${2}" "${repo_path}"
                then
                    logging::error "Cannot clone from GIT repo '${2}'"
                    exit 200
                fi
            elif ! hg clone "${2}" "${repo_path}"
            then
                logging::error "Cannot clone from Mercurial repo '${2}'"
                exit 200
            else
                logging::info "Cloned '${2}' into folder '${repo_path}'"
            fi

            shift 2
            ;;

        --list)
            {
                if ! cd "${repo_path}"
                then
                    logging::error "No such path '${repo_path}'"
                elif [ -d .git ]
                then
                    git branch --list -a | sed -e 's/^[\ \*]*//g' | awk -F/ '{print $NF;}' | grep -v '^master$' | sort -u
                else
                    hg branches | awk '{print $1;}'
                fi
            }

            exit $?
            ;;

        --version)
            singletons::version
            exit 0
            ;;

        --)
            shift
            break
            ;;

        *)
            showhelp "${long_options}" >&2
            exit 0
            ;;
    esac
done
