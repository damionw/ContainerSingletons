#!/usr/bin/env bash

#===================================================================================
#                          Import tools library
#===================================================================================
first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

. "${local_path}/../../singletons"

#===================================================================================
#                              Logging Options
#===================================================================================
logging::set_severity info

#===================================================================================
#                              Help Message
#===================================================================================
showhelp() {
    local _synopsis="
        Maintain local /etc/hosts file
    "

    local -A _keywords=(
        [debug]="Expose debug level logging"
        [info]="Expose normal level logging"
        [warning]="Expose error level logging"
        [error]="Expose error level logging"
        [fatal]="Expose fatal error level logging"
        [hosts:]="Select the hosts file to manage"
        [version]="Produce the version string"
        [help]="Display instructions"
    )

    local _terms="$(echo "${@}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}')"
    local _topic

    local _contents="$(
        echo "${_terms}" | awk -F: '{printf("%s[--%s%s]", sep, $1, (NF == 2 ? sprintf("=<%s>", $1) : "")); sep=" "}'
        echo -en "${_synopsis:+\n}"
        echo "${_synopsis}" | sed -e 's/^[ ]*//g' -e '/^[ ]*$/d'

        echo "${_terms}" | {
            _prefix="\n"

            while read _topic
            do
                if [ -n "${_keywords["${_topic}"]}" ]
                then
                    _fill="$(for ((i=$(echo -n "${_topic}" | wc -c); i < 15; ++i)); do echo -n " "; done)"
                    echo -e "${_prefix}--${_topic}${_fill}${_keywords["${_topic}"]}" | sed -e 's/^./    &/g'
                    _prefix=""
                fi
            done
        }
    )"

    echo -e "Usage: $0 ${_contents}\n" >&2
}

#===================================================================================
#
#===================================================================================
is_git() {
    echo "$1" | egrep -q '(git[\@\:\.]|github)'
}

#===================================================================================
# NOTE: There is a bug in getopts where not specifying at least one short option
#       will cause the first non option parameter to be discarded. Here, we just
#       use -h (help)
#===================================================================================
long_options="help,version,debug,info,warning,error,fatal,hosts:"

OPTION_TEMP=$(getopt -a -o hv --long ${long_options} -- "$@")

if [ $? != 0 ]
then
    logging::fatal "Invalid command line options ${OPTION_TEMP}"
fi

eval set -- "$OPTION_TEMP"

#===================================================================================
#                       Process command line parameters
#
# NOTE: The command line parameters are available for scripts which
#       source this file.
#===================================================================================
hostfile=/etc/hosts

while true
do
    case "$1" in
        --debug|--info|--warning|--error|--fatal)
            logging::set_severity "$(echo "${1}" | sed -e 's/^[\-]*//g')"
            shift
            ;;

        --hosts)
            logging::warning "Selecting hostfile '${2}'"
            hostfile="${2}"
            shift 2
            ;;

        --version)
            singletons::version
            exit 0
            ;;

        --)
            shift
            break
            ;;

        *)
            showhelp "${long_options}" >&2
            exit 0
            ;;
    esac
done

#===================================================================================
#
#===================================================================================
operation="$(echo ${1} | tr '[A-Z]' '[a-z]')"
ipaddr="${2}"
hostname="${3}"

if [ -z "${ipaddr}" -o -z "${hostname}" ]
then
    echo "No host information provided" >&2
    exit 255
fi

backupfile="${hostfile}.${USER}-backup"
sentinel="#___________________HostsMan_______________"
augmented_contents="$(test -f "${hostfile}" && awk "/^$sentinel/{sentinel=!sentinel;} !/^$sentinel/"'{if (sentinel) {print $0;}}' sentinel=0 < "${hostfile}")"
original_contents="$(test -f "${hostfile}" && awk "/^$sentinel/{sentinel=!sentinel;} !/^$sentinel/"'{if (sentinel) {print $0;}}' sentinel=1 < "${hostfile}")"
filtered_output="$(echo "${augmented_contents}" | grep -v '[ ][ ]*'"${hostname}"'[ ]*$')"

if [ ! -f "${backupfile}" -a -f "${hostfile}" ]
then
    cp "${hostfile}" "${backupfile}"
fi

case "${operation}" in
    "add")
        filtered_output="$(echo "${ipaddr} ${hostname}"; echo "${filtered_output}")"
        ;;

    "remove")
        ;;

    *)
        echo "Unknown command ${command}" >&2
        exit 255
        ;;
esac

{
    echo "${original_contents}"
    echo "${sentinel}"
    echo "${filtered_output}"
    echo "${sentinel}"
} > "${hostfile}"
