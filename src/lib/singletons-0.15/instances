#!/usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

#===================================================================================
#                                 Imports
#===================================================================================
. "${local_path}/logging"

#===================================================================================
#                                 Functions
#===================================================================================
singletons::instance::get_timezone() {
    local _tzchecksum=$(md5sum -b /etc/localtime | awk '{print $1;}')

    while read _row
    do
        echo "${_row}"
        return 0
    done <<< "$(cd /usr/share/zoneinfo && find * -type f -exec bash -c "md5sum -b {} | grep -q '^$_tzchecksum'" \; -print)"

    false
}

singletons::instance::get_container_username() {
    echo developer
}

singletons::instance::get_singleton() {
    echo "${1:?Provide image name}.singleton"
}

singletons::instance::get_image_from_instance() {
    local _instance_name

    if ! _instance_name="${1:?Must provide an instance name}"
    then
        return 211
    fi

    echo "${_instance_name}" | tr '[A-Z]' '[a-z]'
}

singletons::instance::get_container_instance() {
    sudo docker ps --filter ancestor="${1:?Provide image name}" --format "{{.ID}}"
}

singletons::instance::get_container_address() {
    local _instance_name
    local _container_id

    if ! _instance_name="${1:?Must provide an instance name}"
    then
        return $?
    fi

    local _image_name="$(echo "${_instance_name}" | tr '[A-Z]' '[a-z]')"

    if ! _container_id=$(singletons::instance::get_container_instance "${_image_name}")
    then
        return $?
    elif [ -z "${_container_id}" ]
    then
        return 177
    else
        sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' "${_container_id}"
    fi
}

singletons::instance::get_docker_image() {
    sudo docker images --format "{{.Repository}}" | grep "^${1:?Provide image name}"'$'
}

singletons::instance::select_config() {
    local name
    local _status=0
    local repo=

    if ! name="${1:?Must provide an instance name}"
    then
        return $?
    elif ! repo="$(singletons::repo)"
    then
        return $?
    elif ! pushd "${repo}" >/dev/null 2>&1
    then
        logging::error "Can't access repo '${repo}'"
        return $?
    elif [ -d .git ]
    then
        (git checkout "${name}" && (git pull >/dev/null 2>&1 || true)) >/dev/null
    else
        (hg checkout "${name}" && (hg fetch >/dev/null 2>&1 || true)) >/dev/null
    fi

    _status=$?
    popd >/dev/null 2>&1
    return ${_status}
}

singletons::instance::names() {
    local _repo=
    local _status=0

    if ! _repo="$(singletons::repo)"
    then
        return $?
    elif ! pushd "${_repo}" >/dev/null 2>&1
    then
        logging::error "Can't access repo '${repo}'"
        return $?
    elif [ -d .git ]
    then
        git branch --list -a | sed -e 's/^[\ \*]*//g' | awk -F/ '{print $NF;}' | grep -v '^master$' | sort -u
    else
        hg branches | awk '{print $1;}'
    fi

    _status=$?
    popd >/dev/null 2>&1
    return ${_status}
}

singletons::instance::build() {
    local name=${1:?Need instance name}
    local status=0
    local image_name

    if ! image_name="$(singletons::instance::get_image_from_instance "${name}")"
    then
        return $?
    fi

    logging::info "Building container image ${image_name}"

    if ! singletons::instance::select_config "${name}"
    then
        return $?
    elif ! pushd "$(singletons::repo)" >/dev/null 2>&1
    then
        logging::error "Can't access repo '${repo}'"
        return $?
    fi

    singletons::instance::stop "${image_name}"

    if ! nice sudo docker build \
        --tag "${image_name}" \
        --build-arg UNAME=$(singletons::instance::get_container_username) \
        --build-arg UID=$(id -u) \
        --build-arg GID=$(id -g) \
        --build-arg TZ=$(singletons::instance::get_timezone) \
        .
    then
        logging::error "Failed building container image ${image_name}"
        status=77
    fi

    popd >/dev/null 2>&1
    return $status
}

singletons::instance::delete() {
    local name=${1:?Need instance name}
    local image_name

    if ! image_name="$(singletons::instance::get_image_from_instance "${name}")"
    then
        return $?
    fi

    local singleton_name="$(singletons::instance::get_singleton "${image_name}")"
    local docker_image="$(singletons::instance::get_docker_image "${image_name}")"

    singletons::instance::stop "${name}"

    if [ -n "${docker_image}" ]
    then
        logging::warning "Removing image ${docker_image}"
        sudo docker rmi "${docker_image}"
    fi
}

singletons::instance::status() {
    local name=${1:?Need instance name}
    local image_name

    if ! image_name="$(singletons::instance::get_image_from_instance "${name}")"
    then
        return $?
    fi

    local singleton_name="$(singletons::instance::get_singleton "${image_name}")"
    local docker_image="$(singletons::instance::get_docker_image "${image_name}")"
    local container_id="$(singletons::instance::get_container_instance ${image_name})"

    echo "${name} ${singleton_name} ${container_id:-down}"
    test -n "${container_id}"
}

singletons::instance::stop() {
    local name=${1:?Need instance name}
    local image_name

    if ! image_name="$(singletons::instance::get_image_from_instance "${name}")"
    then
        return $?
    fi

    local _host_manager="$(singletons::hostmanager)"
    local singleton_name="$(singletons::instance::get_singleton "${image_name}")"
    local _ipaddr=

    if test -x "${_host_manager}" && _ipaddr="$(singletons::instance::get_container_address "${name}")"
    then
        logging::warning "Deregistering host ${name}"
        "${_host_manager}" remove "${_ipaddr}" "${name}"
    fi

    logging::warning "Stopping singleton ${singleton_name}"

    sudo docker kill "${singleton_name}"
    sudo docker rm "${singleton_name}"
}

singletons::instance::start() {
    local name=${1:?Need instance name}
    local image_name

    if ! image_name="$(singletons::instance::get_image_from_instance "${name}")"
    then
        return $?
    fi

    local singleton_name="$(singletons::instance::get_singleton "${image_name}")"

    if [ -n "$(singletons::instance::get_container_instance ${image_name})" ]
    then
        logging::warning "Instance ${singleton_name} is already running"
        return 0
    fi

    # Find the stopped container
    container_id="$(
        sudo docker ps -a --filter ancestor="${image_name}" --format "{{.ID}}"
    )"

    if [ -n "${container_id}" ]
    then
        logging::info "Restarting existing container ${container_id} for image ${image_name}"
        sudo docker start "${container_id}"
        return $?
    fi

    if [ -z "$(singletons::instance::get_docker_image "${image_name}")" ]
    then
        logging::info "Building container image ${image_name}"

        if ! singletons::instance::build "${name}"
        then
            logging::error "Cannot build container for ${name}"
            return 255
        fi
    fi

    logging::info "Starting container instance ${image_name} as ${singleton_name}"

    local extra_options=()
    local _row

    local profile_dir="${HOME}/tmp/profile.${image_name}"

    if [ ! -d "${profile_dir}" ]
    then
        mkdir -p "${profile_dir}"
    fi

    {
        chmod -R 770 "${profile_dir}"
        chown -R 1000 "${profile_dir}"
    } >/dev/null 3>&1

    extra_options[${#extra_options[@]}]="-e"
    extra_options[${#extra_options[@]}]="TZ=$(singletons::instance::get_timezone)"

    local repo

    if ! singletons::instance::select_config "${name}"
    then
        return $?
    elif ! repo="$(singletons::repo)"
    then
        logging::error "Can't access repo folder '${repo}'"
        return $?
    elif [ -f "${repo}/options.txt" ]
    then
        local script='func() {
            local args=("$@")

            for ((i=0; i < ${#args[@]}; ++i)) {
                cat <<< "${args[${i}]}"
            }
        }
        func '"$(
            sed -e 's/#.*$//g' -e '/^[ ]*$/d' < "${repo}/options.txt" |
            tr '\n' ' '
        )"

        while read _row
        do
            extra_options[${#extra_options[@]}]="${_row}"
        done <<<"$(bash <<< "${script}")"
    fi

    local _hosts_file="${HOME}/tmp/hosts.${image_name}"
    local _hosts_instance
    local _ipaddr=

    {
        echo "127.0.0.1 localhost ${name}"

        while read _hosts_instance
        do
            if [ -z "${_hosts_instance}" ]
            then
                continue
            elif _ipaddr="$(singletons::instance::get_container_address "${_hosts_instance}")"
            then
                echo "${_ipaddr} ${_hosts_instance}"
            fi
        done <<< "$(singletons::instance::names)"
    } > "${_hosts_file}"

    chmod 777 "${_hosts_file}"

    sudo docker run \
        -v "${HOME}:${HOME}" \
        -v "${_hosts_file}:/etc/hosts" \
        --name "${singleton_name}" \
        -v "${profile_dir}:/home/$(singletons::instance::get_container_username)/Host" \
        --memory=1g \
        --cpus=0.5 \
        "${extra_options[@]}" \
        -d "${image_name}"

    local _result=$?
    local _host_manager="$(singletons::hostmanager)"

    if [ -x "${_host_manager}" ] && _ipaddr="$(singletons::instance::get_container_address "${name}")"
    then
        logging::warning "Registering host ${_hosts_instance} as ${_ipaddr}"
        "${_host_manager}" add "${_ipaddr}" "${name}"
    fi

    return ${_result}
}

singletons::instance::attach() {
    local name=${1:?Need instance name}
    local image_name

    if ! image_name="$(singletons::instance::get_image_from_instance "${name}")"
    then
        return $?
    fi

    container_id="$(singletons::instance::get_container_instance ${image_name})"

    if [ -z "${container_id}" ]
    then
        logging::error "Singleton instance for image ${image_name} is missing"
        return 255
    fi

    exec sudo docker exec -it "${container_id}" bash
}

singletons::instance::exec() {
    local name=${1:?Need instance name}
    shift
    local commands="${@:-false}"
    local image_name

    if ! image_name="$(singletons::instance::get_image_from_instance "${name}")"
    then
        return $?
    fi

    container_id="$(singletons::instance::get_container_instance ${image_name})"

    if [ -z "${container_id}" ]
    then
        logging::error "Singleton instance for image ${image_name} is missing"
        return 255
    fi

    exec sudo docker exec -it "${container_id}" /bin/bash -c "${commands}"
}
